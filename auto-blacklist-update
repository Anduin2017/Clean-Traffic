#!/bin/bash

#==========================
# Set up the environment
#==========================
set -e                  # exit on error
set -o pipefail         # exit on pipeline error
set -u                  # treat unset variable as error

export LC_ALL=C
export LANG=en_US.UTF-8
export DEBIAN_FRONTEND=noninteractive

Green="\033[32m"
Red="\033[31m"
Yellow="\033[33m"
Blue="\033[36m"
Font="\033[0m"
GreenBG="\033[42;37m"
RedBG="\033[41;37m"
OK="${Green}[  OK  ]${Font}"
ERROR="${Red}[FAILED]${Font}"
WARNING="${Yellow}[ WARN ]${Font}"

function print_ok() {
  echo -e "${OK} ${Blue} $1 ${Font}"
}

function print_error() {
  echo -e "${ERROR} ${Red} $1 ${Font}"
}

function print_warn() {
  echo -e "${WARNING} ${Yellow} $1 ${Font}"
}

function judge() {
  if [[ 0 -eq $? ]]; then
    print_ok "$1 succeeded"
  else
    print_error "$1 failed"
    exit 1
  fi
}

# List of URLs to fetch IP lists
ip_urls=(
  'https://git.aiursoft.cn/PublicVault/ipsum/raw/branch/master/levels/3.txt'
  'https://gitlab.aiursoft.cn/anduin/ShameList-HackersIPs/-/raw/master/list'
  'https://iplists.firehol.org/files/firehol_level3.netset'
  # Add more URLs as needed
)

ipsetname_v4=ufw-blocklist-ipsum
ipsetname_v6=ufw-blocklist-ipsum-ipv6
ipset_exe=/usr/sbin/ipset
tmpfile=$(mktemp)

# Ensure the ipset exists
print_ok "Check $ipsetname_v4 and $ipsetname_v6 exist..."
$ipset_exe -t list "$ipsetname_v4" &>/dev/null
$ipset_exe -t list "$ipsetname_v6" &>/dev/null
judge "Check if ipset exists"

# Download and concatenate the lists
print_ok "Downloading IP lists and concatenating..."
for url in "${ip_urls[@]}"; do
  print_ok "Downloading from $url..."
  curl -sS -f --compressed "$url" >> "$tmpfile" || print_warn "Failed to download from $url"
  judge "Download from $url"
done
judge "Download and concatenate lists"

print_ok "Parsing and sanitizing the list..."
mapfile -t scrublist < <(
  sort -u "$tmpfile" \
    | sed -e 's/[[:space:]]*#.*//' \
          -e 's/^[[:space:]]*//' \
          -e 's/[[:space:]]*$//' \
    | grep -E -v '^$'
)
rm -f "$tmpfile"
judge "Parse and sanitize list"

print_ok "Create temporary ipset..."
# tmpsetname="$(mktemp -u | cut -f2 -d'.')-tmp"
# $ipset_exe -q create "$tmpsetname" hash:net
RANDOM=$$  # Seed random number generator with process ID
tmpset_v4="tmp-v4-$(mktemp -u XXXXXX)"
tmpset_v6="tmp-v6-$(mktemp -u XXXXXX)"
$ipset_exe -q create "$tmpset_v4" hash:net              || print_warn "Failed to create temporary ipset $tmpset_v4"
$ipset_exe -q create "$tmpset_v6" hash:net family inet6 || print_warn "Failed to create temporary ipset $tmpset_v6"
judge "Create temporary ipset"

print_ok "Adding IPs to temporary ipset..."
cnt_v4=0
cnt_v6=0
for i in "${scrublist[@]}"; do
  #$ipset_exe add "$tmpsetname" "$i" || print_warn "Failed to add $i to $tmpsetname"
  if [[ "$i" == *:* ]]; then
    # IPv6 address
    $ipset_exe add "$tmpset_v6" "$i" || print_warn "Failed to add IPv6 $i to $tmpset_v6"
    cnt_v6=$((cnt_v6+1))
  else
    # IPv4 address
    $ipset_exe add "$tmpset_v4" "$i" || print_warn "Failed to add IPv4 $i to $tmpset_v4"
    cnt_v4=$((cnt_v4+1))
  fi
done

print_ok "Added $cntv4 IPv4 IPs and $cnt_v6 IPv6 IPs to temporary ipset ${tmpset_v4} and $tmpset_v6"

print_ok "Swap temporary ipset with $ipsetname_v4 and $ipsetname_v6..."
#$ipset_exe swap "$tmpsetname" "$ipsetname"
$ipset_exe swap "$tmpset_v4" "$ipsetname_v4" || print_warn "Failed to swap $tmpset_v4 with $ipsetname_v4"
judge "Swap temporary ipset with $ipsetname_v4"
$ipset_exe swap "$tmpset_v6" "$ipsetname_v6" || print_warn "Failed to swap $tmpset_v6 with $ipsetname_v6"
judge "Swap temporary ipset with $ipsetname_v6"

print_ok "Destroy temporary ipset..."
$ipset_exe -q destroy "$tmpset_v4" || print_warn "Failed to destroy temporary ipset $tmpset_v4"
$ipset_exe -q destroy "$tmpset_v6" || print_warn "Failed to destroy temporary ipset $tmpset_v6"
judge "Destroy temporary ipset"

print_ok "Finished updating $ipsetname_v4 and $ipsetname_v6 with new IPs."
